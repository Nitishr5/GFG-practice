








Optimise Solution===========> TIME COMPLAXITY= O(N).
class Solution {
  public:
   pair<bool, int> isBalancedFast(Node* root) {
        // Code here
        if(root == NULL)
        {
            return {true,0};
        }
        pair<bool,int> left= isBalancedFast(root->left);
        pair<bool,int> right= isBalancedFast(root->right);
        
        bool leftAns=left.first;
        bool rightAns= right.first;
        
        bool diff=abs(left.second-right.second)<=1;
        
        pair<bool, int> ans;
        
        ans.second= max(left.second, right.second)+1;
        
        if(leftAns && rightAns && diff){
            ans.first= true;
        }
        else{
            ans.first= false;
        }
        return ans;
    }
    bool isBalanced(Node* root)
    {
        return isBalancedFast(root).first;
    }
};









Brut Force==================>> Time complaxity O(N^2)




class Solution {
    
  public:
    int height(Node* node) {
        // Base case
        if(node==NULL){
            return 0;
        }
        int left=height(node->left);
        int right=height(node->right);
        
        int ans= max(left,right)+1;
        return ans;
    }
    bool isBalanced(Node* root) {
        // Code here
        if(root==NULL)
        {
            return true;
        }
        
        bool left= isBalanced(root->left);
        bool right= isBalanced(root->right);
        
        bool diff= abs (height(root->left)-height(root->right))<=1;
        
        if(left && right && diff){
            return 1;
        }
        else{
            return false;
        }
    }
};
