Recursive solution============>>>


class Solution {
  public:
    // Function to convert a binary tree into its mirror tree.
    void mirror(Node* node) {
        // code here
        if(node==0)
        return;
        
        swap(node->left,node->right);
        
        mirror(node->left);
        mirror(node->right);
        
    }
};




WITHOUT USING RECURSION PROBLEM

void mirror(Node* root) {
    if (!root) return;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node* curr = q.front();
        q.pop();

        swap(curr->left, curr->right);

        if (curr->left) q.push(curr->left);
        if (curr->right) q.push(curr->right);
    }
}



















ðŸ”„ Dry Run (step-by-step):
ðŸ“Œ Initial:
Queue: [1]

Step 1:
curr = 1

Swap 2 and 3

New structure:


      1
     / \
    3   2
         / \
        4   5
Add 3 and 2 to queue

Queue: [3, 2]

Step 2:
curr = 3

Swap left = NULL and right = 6 â†’ Now: left = 6, right = NULL

New structure:


      1
     / \
    3   2
   /     / \
  6     4   5
Add 6 to queue

Queue: [2, 6]

Step 3:
curr = 2

Swap 4 and 5


      1
     / \
    3   2
   /     / \
  6     5   4
Add 5, 4 to queue

Queue: [6, 5, 4]

Step 4:
curr = 6

No children â†’ Nothing happens

Queue: [5, 4]

Step 5:
curr = 5

No children â†’ Nothing happens

Queue: [4]

Step 6:
curr = 4

No children â†’ Nothing happens

Queue: [] (empty now)

âœ… Final Tree (Mirrored):

      1
     / \
    3   2
   /     / \
  6     5   4

ðŸ§  Summary:
Your code correctly uses BFS (queue) to swap left and right children of each node level by level.

This is an iterative alternative to recursive mirror/invert logic.

Time Complexity: O(n) (visits each node once)

Space Complexity: O(n) (queue in worst case)
