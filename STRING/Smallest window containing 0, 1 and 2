Given a string S consisting of the characters 0, 1 and 2. Your task is to find the length of the smallest substring of string S that contains all the three characters 0, 1 and 2. If no such substring exists, then return -1.

Example 1:

Input:
S = 10212
Output:
3
Explanation:
The substring 102 is the smallest substring
that contains the characters 0, 1 and 2.
Example 2:

Input: 
S = 12121
Output:
-1
Explanation: 
As the character 0 is not present in the
string S, therefor no substring containing
all the three characters 0, 1 and 2
exists. Hence, the answer is -1 in this case.


































class Solution {
  public:
    int smallestSubstring(string S) {
        // Code here
          int n = S.length();
    
    // Frequency map to count '0', '1', and '2'
    unordered_map<char, int> freq;
    
    int left = 0;
    int min_len = INT_MAX;
    int count = 0;  // To count how many of '0', '1', and '2' we have in the window
    
    for (int right = 0; right < n; right++) {
        // Expand the window by including S[right]
        if (freq[S[right]] == 0) {
            count++;
        }
        freq[S[right]]++;
        
        // Once the window contains all three characters, try to shrink it
        while (count == 3) {
            // Update the minimum length of the valid window
            min_len = min(min_len, right - left + 1);
            
            // Shrink the window by moving the left pointer
            freq[S[left]]--;
            if (freq[S[left]] == 0) {
                count--;
            }
            left++;
        }
    }
    
    // If we never found a valid window, return -1
    return min_len == INT_MAX ? -1 : min_len;
    }
};
