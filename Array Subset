Given two arrays a[] and b[], your task is to determine whether b[] is a subset of a[].

Examples:

Input: a[] = [11, 7, 1, 13, 21, 3, 7, 3], b[] = [11, 3, 7, 1, 7]
Output: true
Explanation: b[] is a subset of a[]
Input: a[] = [1, 2, 3, 4, 4, 5, 6], b[] = [1, 2, 4]
Output: true
Explanation: b[] is a subset of a[]







class Solution {
  public:
    // Function to check if b is a subset of a
    bool isSubset(vector<int> &a, vector<int> &b) {
        // Your code here
        unordered_map<int,int>freq;
        // Count frequencies in A
    for (int x : a) {
        freq[x]++;
    }

    // For each element in B, reduce count
    for (int x : b) {
        if (freq[x] == 0) return false;  // Not found or used up
        freq[x]--;
    }

    return true;
    }
};










OTHER APPROCH USING SORT AND THEN MATCH ===============================>>>>>>>>>>>>

class Solution {
  public:
    // Function to check if b is a subset of a
    bool isSubset(vector<int> &A, vector<int> &B) {
        // Your code here
        sort(A.begin(), A.end());
    sort(B.begin(), B.end());

    int i = 0, j = 0;
    while (i < A.size() && j < B.size()) {
        if (A[i] == B[j]) {
            i++;
            j++;
        } else if (A[i] < B[j]) {
            i++;
        } else {
            return false; // B[j] not in A
        }
    }

    return (j == B.size()); // True if all elements of B were matched
    }
};
