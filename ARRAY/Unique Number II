Given an array arr[] containing 2*n + 2 positive numbers, out of which 2*n numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers. Return the answer in increasing order.

Examples:

Input: arr[] = [1, 2, 3, 2, 1, 4]
Output: [3, 4] 
Explanation: 3 and 4 occur exactly once.
Input: arr[] = [2, 1, 3, 2]
Output: [1, 3]
Explanation: 1 and 3 occur exactly once.


























class Solution {
  public:
    vector<int> singleNum(vector<int>& arr) {
        // Code here.
            unordered_map<int, int> freq;
    
    // Step 1: Count frequencies
    for (int num : arr) {
        freq[num]++;
    }

    vector<int> ans;
    // Step 2: Maintain original order
    for (int num : arr) {
        if (freq[num] == 1) {
            ans.push_back(num);
        }
    }
    sort(ans.begin(), ans.end());

    return ans;

    }
};
