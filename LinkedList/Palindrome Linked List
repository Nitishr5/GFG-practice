Given a head singly linked list of positive integers. The task is to check if the given linked list is palindrome or not.

Examples:

Input: head: 1 -> 2 -> 1 -> 1 -> 2 -> 1
Output: true
Explanation: The given linked list is 1 -> 2 -> 1 -> 1 -> 2 -> 1 , which is a palindrome and Hence, the output is true.

Input: head: 1 -> 2 -> 3 -> 4
Output: false
Explanation: The given linked list is 1 -> 2 -> 3 -> 4, which is not a palindrome and Hence, the output is false.






















class Solution {
    private:
    Node* getMid(Node* head){
        Node* slow=head;
        Node* fast=head->next;
        
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    
    Node* reverse(Node *head){
        Node* curr=head;
        Node* prev=NULL;
        Node* next=NULL;
        
        while(curr !=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
  public:
    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {
        // Your code here
        if(head==NULL || head->next==NULL){
            return true;
        }
        
        // step 1-> find middle
        Node* middle= getMid(head);
        
        //step2 -> reverse list after middle
        Node* temp=middle->next;
        middle->next=reverse(temp);
        
        
        // step3 - Compare both half
        
        Node* head1=head;
        Node* head2=middle->next;
        
        while(head2 !=NULL){
            if(head1->data!=head2->data){
                return false;
            }
            head1=head1->next;
            head2=head2->next;
        }
        //step4 - repeate step2
        temp=middle->next;
        middle->next=reverse(temp);
        
        return true;
    }
};






















2ND APPROCH-------------------------------------------------->







class Solution {
  public:
    // Function to check whether the list is palindrome.
    bool checkPalindrome(vector<int> arr){
        
        int n=arr.size();
        int s=0;
        int e=n-1;
        
        while(s<=e){
            if(arr[s]!=arr[e]){
                return 0;
            }
            s++;
            e--;
        }
        return 1;
    }
    bool isPalindrome(Node *head) {
        // Your code here
        vector<int> arr;
        
        Node* temp=head;
        while(temp!=NULL){
            arr.push_back(temp->data);
            temp=temp->next;
        }
        
        return checkPalindrome(arr);
    }
};
